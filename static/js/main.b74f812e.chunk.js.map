{"version":3,"sources":["components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","state","users","loading","show","currentUser","deleted","componentDidMount","axios","get","then","res","setState","data","delete","id","put","catch","err","console","log","showMore","find","user","this","Spinner","animation","Card","style","width","height","borderRadius","overflowY","ListGroup","variant","map","Item","Media","className","src","image_url","alt","Body","Row","first_name","last_name","phone","company","Col","Button","size","onClick","Modal","onHide","Header","closeButton","Title","gender","email","React","Component","App","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uXAmHeA,G,iNA5GXC,MAAM,CACFC,MAAM,GACNC,SAAQ,EACRC,MAAK,EACLC,YAAY,GACZC,SAAQ,G,EAKZC,kBAAkB,WAChBC,IAAMC,IAAI,sDACTC,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACV,MAAMS,EAAIE,OACzB,EAAKD,SAAS,CAACT,SAAQ,Q,EAI7BW,OAAO,SAACC,GACJP,IAAMQ,IAAI,sDAAsDD,GACjEL,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAACN,SAAQ,OAGxBW,OAAM,SAAAC,GACHC,QAAQC,IAAIF,O,EAIpBG,SAAS,SAACN,GACR,EAAKH,SAAS,CAACR,MAAK,IACpB,EAAKQ,SAAS,CAACP,YAAY,EAAKJ,MAAMC,MAAMoB,MAAK,SAAAC,GAAI,OAAER,IAAKQ,EAAKR,S,wEAG1D,IAAD,OACJ,OAAGS,KAAKvB,MAAME,QAGR,kBAACsB,EAAA,EAAD,CAASC,UAAU,WAKvB,kBAACC,EAAA,EAAD,CAAMZ,GAAG,OAAMa,MAAO,CAAEC,MAAO,UAAWC,OAAO,QAAQC,aAAa,OAAOC,UAAW,WACtF,kBAACC,EAAA,EAAD,CAAWC,QAAQ,SACdV,KAAKvB,MAAMC,MAAMiC,KAAI,SAAAZ,GAAI,OAC1B,kBAACU,EAAA,EAAUG,KAAX,KACE,kBAACC,EAAA,EAAD,KACE,yBACER,MAAO,GACPC,OAAQ,GACRQ,UAAU,OACVC,IAAKhB,EAAKiB,UACVC,IAAI,wBAEN,kBAACJ,EAAA,EAAMK,KAAP,KACA,kBAACC,EAAA,EAAD,aAAWpB,EAAKqB,WAAhB,IAA6BrB,EAAKsB,WAClC,kBAACF,EAAA,EAAD,cAAYpB,EAAKuB,OACjB,kBAACH,EAAA,EAAD,gBAAcpB,EAAKwB,SACnB,kBAACJ,EAAA,EAAD,KACI,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQf,QAAQ,SAAUgB,KAAK,KAAKC,QAAS,kBAAI,EAAKrC,OAAOS,EAAKR,MAAlE,WAEF,kBAACiC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEf,QAAQ,UACRgB,KAAK,KACLC,QAAS,WAAK,EAAK9B,SAASE,EAAKR,MAHnC,kBAWV,kBAACqC,EAAA,EAAD,CAAOhD,KAAMoB,KAAKvB,MAAMG,KAAMiD,OAAQ,WAAK,EAAKzC,SAAS,CAACR,MAAK,MAC/D,kBAACgD,EAAA,EAAME,OAAP,CAAcC,aAAW,GACzB,kBAACH,EAAA,EAAMI,MAAP,KACGhC,KAAKvB,MAAMG,KAAKoB,KAAKvB,MAAMI,YAAYuC,WAAY,IAAIpB,KAAKvB,MAAMI,YAAYwC,UAAU,KAG3F,kBAACO,EAAA,EAAMV,KAAP,KACClB,KAAKvB,MAAMG,KAAK,WAAWoB,KAAKvB,MAAMI,YAAYoD,OAAO,GAC1D,6BACCjC,KAAKvB,MAAMG,KAAK,UAAUoB,KAAKvB,MAAMI,YAAYqD,MAAM,KAKxD,kBAACN,EAAA,EAAD,CAAOhD,KAAMoB,KAAKvB,MAAMK,QAAS+C,OAAQ,WAAK,EAAKzC,SAAS,CAACN,SAAQ,MACrE,kBAAC8C,EAAA,EAAME,OAAP,CAAcC,aAAW,GACzB,kBAACH,EAAA,EAAMI,MAAP,uBAIA,kBAACJ,EAAA,EAAMV,KAAP,KACE,iE,GAjGGiB,IAAMC,Y,YCcVC,MAbf,WACE,OACE,yBAAKC,MAAM,YACH,sCACA,qCACA,gCACA,kBAAC,EAAD,SCDQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhE,MAAK,SAAAiE,GACjCA,EAAaC,kB","file":"static/js/main.b74f812e.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport { Card, ListGroup,Col,Row,Spinner, Button,Media,Modal} from \"react-bootstrap\";\r\nimport  './Home.css'\r\n\r\n\r\nclass Home extends React.Component {\r\n    state={\r\n        users:[],\r\n        loading:true,\r\n        show:false,\r\n        currentUser:\"\",\r\n        deleted:false\r\n    };\r\n  \r\n  \r\n\r\n    componentDidMount=()=>{\r\n      axios.get(\"https://test-be.dailymealz.app/api/json/test/users\")\r\n      .then(res=>{\r\n          this.setState({users:res.data});\r\n          this.setState({loading:false});\r\n      });\r\n    }\r\n    \r\n    delete=(id)=>{\r\n        axios.put('https://test-be.dailymealz.app/api/json/test/users/'+id)\r\n      .then(res=>{\r\n        this.setState({deleted:true});\r\n\r\n      })\r\n      .catch(err=>{\r\n          console.log(err);\r\n      });\r\n    }\r\n\r\n  showMore=(id)=>{\r\n    this.setState({show:true});\r\n    this.setState({currentUser:this.state.users.find(user=>id===user.id)});\r\n  }\r\n\r\n  render(){\r\n      if(this.state.loading)\r\n      {\r\n          return(\r\n            <Spinner animation=\"border\" />\r\n          );\r\n      }\r\n      \r\n      return(\r\n        <Card id='card'style={{ width: '22.5rem' ,height:'49rem',borderRadius:'40px',overflowY: 'scroll'}}>\r\n          <ListGroup variant=\"flush\">\r\n              {this.state.users.map(user=>\r\n              <ListGroup.Item>\r\n                <Media>\r\n                  <img\r\n                    width={64}\r\n                    height={64}\r\n                    className=\"mr-3\"\r\n                    src={user.image_url}\r\n                    alt=\"Generic placeholder\"\r\n                  />\r\n                  <Media.Body>\r\n                  <Row>Name:{user.first_name} {user.last_name}</Row>\r\n                  <Row>Phone:{user.phone}</Row>\r\n                  <Row>Company:{user.company}</Row>\r\n                  <Row>\r\n                      <Col>\r\n                        <Button variant=\"danger\"  size=\"sm\" onClick={()=>this.delete(user.id)}>Delete</Button>\r\n                      </Col>\r\n                      <Col>\r\n                        <Button\r\n                          variant=\"primary\" \r\n                          size=\"sm\"\r\n                          onClick={()=>{this.showMore(user.id)}}>\r\n                          more..\r\n                        </Button>\r\n                      </Col>\r\n                   </Row>\r\n                  </Media.Body>\r\n                </Media>\r\n              </ListGroup.Item>)}\r\n              <Modal show={this.state.show} onHide={()=>{this.setState({show:false})}}>\r\n              <Modal.Header closeButton>\r\n              <Modal.Title>\r\n                {this.state.show?this.state.currentUser.first_name +' '+this.state.currentUser.last_name:\"\"}\r\n              </Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n              {this.state.show?'Gender: '+this.state.currentUser.gender:\"\"}\r\n              <br/>\r\n              {this.state.show?'Email: '+this.state.currentUser.email:\"\"}\r\n\r\n              </Modal.Body>\r\n              </Modal>\r\n\r\n              <Modal show={this.state.deleted} onHide={()=>{this.setState({deleted:false})}}>\r\n              <Modal.Header closeButton>\r\n              <Modal.Title>\r\n                Alert Message\r\n              </Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <h5>\r\n                 User Deleted Successfully\r\n                 </h5>\r\n              </Modal.Body>\r\n              </Modal>\r\n          </ListGroup>\r\n         </Card>\r\n    );\r\n      \r\n    \r\n  }\r\n}\r\nexport default Home;\r\n","import React from 'react';\nimport Home from '../src/components/Home'\nimport './IphoneX.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nfunction App() {\n  return (\n    <div class=\"iphone-x\">\n            <i>Speaker</i>\n            <b>Camera</b>\n            <screen>\n            <Home/>\n            </screen>\n    </div>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}